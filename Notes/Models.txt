----Database Setup----
NAME should be the full absolute path, including filename, of that file.


----Models----

pub_date = models.DateTimeField('date published')
You can use an optional first positional argument to a Field to designate a human-readable name.
If this field isn’t provided, Django will use the machine-readable name.

Some Field classes have required arguments. CharField, for example, requires that you give it a max_length.
That’s used not only in the database schema, but in validation, as we’ll soon see.

To add an app to project Edit the settings.py file, and change the INSTALLED_APPS setting to include the string 'polls.apps.PollsConfig'.

 The sqlmigrate command takes migration names and returns their SQL:
 python manage.py sqlmigrate polls 0001


 you can also run python manage.py check; this checks for any problems in your project without making migrations or touching the database.

 The migrate command takes all the migrations that haven’t been applied
 (Django tracks which ones are applied using a special table in your database called django_migrations)
 and runs them against your database - essentially,
 synchronizing the changes you made to your models with the schema in the database.


python manage.py shell
We’re using this instead of simply typing “python”, because manage.py sets the DJANGO_SETTINGS_MODULE environment variable,
which gives Django the Python import path to your mysite/settings.py file.

If you’d rather not use manage.py, no problem. Just set the DJANGO_SETTINGS_MODULE environment variable to mysite.settings,
start a plain Python shell, and set up Django:
>>> import django
>>> django.setup()
You must run python from the same directory manage.py is in, or ensure that directory is on the Python path, so that import mysite works.


# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.

from django.utils.encoding import python_2_unicode_compatible
@python_2_unicode_compatible  # only if you need to support Python 2

Some smart queries
Question.objects.filter(question_text__startswith='What')
current_year = timezone.now().year
Question.objects.get(pub_date__year=current_year)

custom methods can be defined on models
# Make sure our custom method worked.
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True


# Create three choices.
>>> q.choice_set.create(choice_text='Not much', votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text='The sky', votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)
# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>
# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
[<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]
>>> q.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
>>> Choice.objects.filter(question__pub_date__year=current_year)
[<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]

python manage.py createsuperuser

